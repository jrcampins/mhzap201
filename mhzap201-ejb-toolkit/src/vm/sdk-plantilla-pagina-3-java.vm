#set($includedFields  = $utils.newMap())
#set($readOnlyFields  = $utils.newMap())
#set($requiredFields  = $utils.newMap())
#set($noInsertFields  = $utils.newMap())
#set($noUpdateFields  = $utils.newMap())
#set($doSubmitFields  = $utils.newMap())
#set($mainPageFields  = $utils.newMap())
#set($includedColumns = $utils.newMap())
#setPropiedadesPagina($pagina)
#setMapasPagina()
#writeJavaCode101($domainclassid)##license
package com.egt.${webapppack1};

## -----------------------------------------------------------------------------
#writeJavaCode201(0)##imports
## -----------------------------------------------------------------------------

public class ${pagecode} extends AbstractPageBean
#if($master0 != '')
        implements PaginaActualizacionConAccionMultiple, PaginaActualizacionConEdicionMultiple, PaginaConsultaConArbol, PaginaConsultaConMaestro {
#else
        implements PaginaActualizacionConAccionMultiple, PaginaActualizacionConEdicionMultiple, PaginaConsultaConArbol {
#end

    // <editor-fold defaultstate="collapsed" desc="Managed Component Definition">
    private void _init() throws Exception {
##      integerRangeValidator1.setMinimum(0L);
##      integerRangeValidator1.setMaximum(2147483647L);
#writeJavaCode203(0)##init-data-providers
#writeJavaCode204(0)##init-reference-data-providers
    }

## -----------------------------------------------------------------------------
#writeJavaCode102(108)##root->cab3
#writeJavaCode103(0)##detalle
## -----------------------------------------------------------------------------
    private Tree tree1 = new Tree();

    @Override
    public Tree getTree1() {
        return tree1;
    }

    public void setTree1(Tree t) {
        this.tree1 = t;
    }

    private Button botonAplicarZum1 = new com.egt.core.jsf.component.Boton();

    public Button getBotonAplicarZum1() {
        return botonAplicarZum1;
    }

    public void setBotonAplicarZum1(Button b) {
        this.botonAplicarZum1 = b;
    }

    private Label etiquetaListaOpcionZum1 = new com.egt.core.jsf.component.Etiqueta();

    public Label getEtiquetaListaOpcionZum1() {
        return etiquetaListaOpcionZum1;
    }

    public void setEtiquetaListaOpcionZum1(Label l) {
        this.etiquetaListaOpcionZum1 = l;
    }

    private Button botonQuitarZum1 = new com.egt.core.jsf.component.Boton();

    public Button getBotonQuitarZum1() {
        return botonQuitarZum1;
    }

    public void setBotonQuitarZum1(Button b) {
        this.botonQuitarZum1 = b;
    }

    private DropDown listaOpcionZum1 = new com.egt.core.jsf.component.ListaDesplegable();

    @Override
    public DropDown getListaOpcionZum1() {
        return listaOpcionZum1;
    }

    public void setListaOpcionZum1(DropDown dd) {
        this.listaOpcionZum1 = dd;
    }

    private IntegerConverter converterListaOpcionZum1 = new IntegerConverter();
  
    public IntegerConverter getConverterListaOpcionZum1() {
        return converterListaOpcionZum1;
    }
  
    public void setConverterListaOpcionZum1(IntegerConverter ic) {
        this.converterListaOpcionZum1 = ic;
    }
  
##  private LongRangeValidator integerRangeValidator1 = new LongRangeValidator();
##
##  public LongRangeValidator getIntegerRangeValidator1() {
##      return integerRangeValidator1;
##  }
##
##  public void setIntegerRangeValidator1(LongRangeValidator lrv) {
##      this.integerRangeValidator1 = lrv;
##  }
##
##  private LongConverter longConverter1 = new LongConverter();
##
##  public LongConverter getLongConverter1() {
##      return longConverter1;
##  }
##
##  public void setLongConverter1(LongConverter lc) {
##      this.longConverter1 = lc;
##  }
##
##  private Anchor anchor1 = new Anchor();
##
##  public Anchor getAnchor1() {
##      return anchor1;
##  }
##
##  public void setAnchor1(Anchor a) {
##      this.anchor1 = a;
##  }
##
## -----------------------------------------------------------------------------
#writeJavaCode105(1)##grid-botones-accion
#writeJavaCode106(5)##grid-hiper-vinculos
#writeJavaCode107(0)##pie3->root    
## -----------------------------------------------------------------------------
#writeJavaCode207(0)##data-providers
#writeJavaCode208(0)##reference-data-providers
## -----------------------------------------------------------------------------
    // </editor-fold>
/**/
    public ${pagecode}() {
    }

#writeJavaCode301(0)##metodos estandar para el manejo de eventos de la pagina: init, preprocess, prerender y destroy

#writeJavaCode302(0)##propiedades estandar para el manejo de los beans de contexto: request, session y application

#writeJavaCode303(0)##implementacion estandar de propiedades y metodos de la interfaz PaginaAbstracta

#writeJavaCode304(0)##implementacion estandar de propiedades de la interfaz PaginaBasica

#writeJavaCode305(0)##implementacion estandar de propiedades de la interfaz PaginaConsulta

#writeJavaCode306(0)##implementacion estandar de propiedades de la interfaz PaginaConsultaConMaestro

#writeJavaCode307(0)##implementacion estandar de propiedades de la interfaz PaginaConsultaConArbol

    // <editor-fold defaultstate="collapsed" desc="propiedad gestor de pagina de actualizacion con arbol">
    private GestorPaginaActualizacionConArbol gestor = new GestorPaginaActualizacionConArbol(this);

    @Override
    public GestorPaginaActualizacionConArbol getGestor() {
        return this.gestor;
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="propiedades y metodos estandar: preiniciar, iniciar, preprocesar, prepresentar, consultar, posconsultar, posrefrescar">
#writeJavaCode311(0)##implementacion especial de propiedades de la interfaz PaginaActualizacion

    @Override
    public String getVinculoPaginaConsultaConTabla() {
        return "tabla";
    }

#writeJavaCode312(0)##implementacion especial de propiedades de la interfaz PaginaActualizacion

#writeJavaCode313(0)##preiniciar, iniciar, preprocesar, prepresentar

    @Override
    public void consultar() {
        FiltroBusqueda filtro = this.getGestor().getFiltroBusqueda(
                this.getContextoPeticion().getFiltroFuncionSelect(),
                this.getContextoPeticion().getCodigoFuncionSelect(),
                this.getContextoPeticion().getNombreFuncionSelect());

        this.consultar(filtro);
    }

    public void consultar(Long filtro) {
        try {
            this.get${domain1}DataProvider().setLimiteFilasFuncionSelect(500);
            this.get${domain1}DataProvider().consultar${domain1}(filtro);
        } catch (Exception ex) {
            this.getGestor().handle(ex);
        } finally {
            this.setConsultaPendiente(false);
        }
    }

    public void consultar(FiltroBusqueda filtro) {
        try {
            this.get${domain1}DataProvider().setLimiteFilasFuncionSelect(500);
            this.get${domain1}DataProvider().consultar${domain1}(filtro);
        } catch (Exception ex) {
            this.getGestor().handle(ex);
        } finally {
            this.setConsultaPendiente(false);
        }
    }

#writeJavaCode314(0)##posconsultar, posrefrescar
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="metodos estandar para refrescar, agregar, editar, deshacer y eliminar de la plantilla #3">
    public String botonAplicarZum1_action() {
        this.getGestor().escoger();
        this.getGestor().zumNodo();
        return null;
    }

    public String botonQuitarZum1_action() {
        this.getGestor().escoger();
        this.getGestor().zumTodo();
        return null;
    }

    public String botonAgregar1_action() {
        if (this.getGestor().agregar()) {
            return this.getGestor().accionVincularDetalle();
        }
        return null;
    }

    public void listaFuncionEdicion1_processValueChange(ValueChangeEvent event) {
        if (this.getListaFuncionEdicion1().getSelected() instanceof Long) {
            this.getGestor().setFuncionEdicionSeleccionada((Long) this.getListaFuncionEdicion1().getSelected());
        }
        NavigationHandler navigator = this.getApplication().getNavigationHandler();
        navigator.handleNavigation(this.getFacesContext(), null, this.getGestor().accionVincularDetalle());
    }

    public String botonEditar1_action() {
        if (this.getGestor().editar()) {
            return this.getGestor().accionVincularDetalle();
        }
        return null;
    }

    public String botonEliminar1_action() {
        this.getGestor().eliminar();
        return null;
    }

    public String botonAplicar1_action() {
        this.getGestor().aplicar();
        return null;
    }

    public String botonDeshacer1_action() {
        this.getGestor().deshacer();
        return null;
    }

    public String botonConfirmar1_action() {
        this.getGestor().confirmar();
        return null;
    }

    public String botonProcesar1_action() {
//      this.getAsistente().procesar();
        return null;
    }

    public String botonDescartar1_action() {
        this.getGestor().descartar();
        return null;
    }

    public String botonRefrescar1_action() {
        this.getGestor().refrescar();
        return null;
    }

    public String botonReconsultar1_action() {
        this.getGestor().reconsultar();
        return null;
    }

    public String botonRetornar1_action() {
        this.getGestor().retornar();
        return null;
    }
    // </editor-fold>

## -----------------------------------------------------------------------------
#writeJavaCode108(5)##grid-hiper-vinculos
## -----------------------------------------------------------------------------
/**/
    String footnote = "a partir de aqui coloque el codigo especifico de la pagina";
}
